---
Checks: "bugprone-*,
         cert-*,
         cppcoreguidelines-*,
         google-explicit-constructor,
         misc-*,
         -misc-non-private-member-variables-in-classes,
         -misc-no-recursion,
         modernize-*,
         -modernize-use-trailing-return-type,
         -modernize-pass-by-value,
         performance-*,
         readability-*,
         "
WarningsAsErrors: '*'
HeaderFilterRegex: '.'
FormatStyle: .clang-format
CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,            value: lower_case }
  - { key: readability-identifier-naming.ClassCase,                value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,               value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,    value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,             value: CamelCase  }
  - { key: readability-identifier-naming.VariableCase,             value: lower_case }
  - { key: readability-identifier-naming.ConstantPrefix,           value: k          }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k          }
  - { key: readability-identifier-naming.ClassMemberCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassMemberSuffix,        value: _          }
  - { key: readability-identifier-naming.PrivateMemberSuffix,      value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticVariableCase,       value: lower_case}
  - { key: readability-identifier-naming.MacroDefinitionCase,      value: UPPER_CASE}
  - { key: readability-identifier-naming.MacroDefinitionIgnoredRegexp, value: '^[A-Z]+(_[A-Z]+)*_$'}
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.EnumCase,                 value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase,            value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase,              value: CamelCase }
  - { key: readability-identifier-naming.ParameterCase,            value: lower_case}
  - { key: readability-identifier-naming.MethodCase,               value: CamelCase }  
  - { key: readability-identifier-naming.IgnoreMainLikeFunctions,  value: true      }
# The rule of 5 is deviated in case of virtual default destructor of abstract class.
# The next lines should be at first commented to check that the only complain is about 
# destructor of abstract class and that the rule can be deviated. Then, it can be uncommented.
  - { key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor, value: true }

# The next line is a workaround for a bug in clang-tidy detecting format of typeTemplateParameter
# The bug is fixed starting from version 17. If using verson 17 of above comment next line.
  - {key: readability-identifier-naming.TypeTemplateParameterIgnoredRegexp, value: expr-type}

...
